# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# Azure Pipeline Template for updating dataset before retraining
# The dataset in this example is updated for illustration purposes only, the data downloaded is the same

parameters:
- name: serviceConnection
  type: string
- name: resourceGroup
  type: string
- name: amlWorkspace
  type: string
- name: dataPath
  type: string
  default: oj_sales_data

jobs:

- job: data_snapshot
  displayName: 'Store New Snapshot of Data in Datastore'
  steps:

    - template: utils/run-aml-python-code.template.yml
      parameters:
        serviceConnection: ${{parameters.serviceConnection}}
        resourceGroup: ${{parameters.resourceGroup}}
        amlWorkspace: ${{parameters.amlWorkspace}}
        scriptPath: src/create_rawset.py
        scriptArguments: --data-path ${{parameters.dataPath}}
        scriptExtraDependencies: azureml-opendatasets==$(SDK_VERSION)
        displayName: 'Download Sample Data'

    - task: AzureCLI@1
      name: datastore_upload
      displayName: 'Upload Files to AML Datastore'
      inputs:
        azureSubscription: ${{parameters.serviceConnection}}
        scriptLocation: inlineScript
        inlineScript: |
          workspace_params="--workspace-name ${{parameters.amlWorkspace}} --resource-group ${{parameters.resourceGroup}}"
          target_path="${{parameters.dataPath}}_$(date +"%Y%m%d-%H%M%S")"
          # Install ML extension
          az extension add -n azure-cli-ml
          # Get default datastore
          datastore=$(az ml datastore show-default $workspace_params --query name -o tsv)
          # Upload files
          az ml datastore upload --name $datastore \
                                 --src-path ${{parameters.dataPath}} \
                                 --target-path $target_path \
                                 --overwrite true \
                                 $workspace_params
          echo "##vso[task.setvariable variable=datastore;isOutput=true;]$datastore"
          echo "##vso[task.setvariable variable=datapath;isOutput=true;]$target_path"

- job: register_dataset
  displayName: 'Register Dataset'
  dependsOn: data_snapshot
  variables: 
    datastore: $[ dependencies.data_snapshot.outputs['datastore_upload.datastore'] ]
    datapath: $[ dependencies.data_snapshot.outputs['datastore_upload.datapath'] ]
  steps:
  - template: utils/run-aml-python-code.template.yml
    parameters:
      serviceConnection: ${{parameters.serviceConnection}}
      resourceGroup: ${{parameters.resourceGroup}}
      amlWorkspace: ${{parameters.amlWorkspace}}
      scriptPath: operation/execution/register_dataset.py
      scriptArguments: --name $(AML_DATASET) --datastore $(DATASTORE) --path $(DATAPATH)
