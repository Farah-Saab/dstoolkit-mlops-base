# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# Azure Pipeline Template for compute setup in specified Workspace

parameters:
- name: environment
  type: string
- name: serviceConnection
  type: string
- name: resourceGroup
  type: string
- name: amlWorkspace
  type: string

jobs:

########################
##  COMPUTE CLUSTERS  ##
########################

- job: aml_compute_training
  displayName: 'Deploy AML Training Compute'
  steps:
  - template: utils/run-aml-python-code.template.yml
    parameters:
      serviceConnection: ${{parameters.serviceConnection}}
      resourceGroup: ${{parameters.resourceGroup}}
      amlWorkspace: ${{parameters.amlWorkspace}}
      scriptPath: operation/execution/create_compute.py
      scriptArguments: |
        --name $(TRAINING_COMPUTE) \
        --config-path configuration/compute/${{parameters.environment}}-training-compute.yml
      scriptExtraDependencies: pyyaml

- job: aml_compute_batchinference
  displayName: 'Deploy AML Batch Inference Compute'
  steps:
  - template: utils/run-aml-python-code.template.yml
    parameters:
      serviceConnection: ${{parameters.serviceConnection}}
      resourceGroup: ${{parameters.resourceGroup}}
      amlWorkspace: ${{parameters.amlWorkspace}}
      scriptPath: operation/execution/create_compute.py
      scriptArguments: |
        --name $(BATCHINFERENCE_COMPUTE) \
        --config-path configuration/compute/${{parameters.environment}}-batchinference-compute.yml
      scriptExtraDependencies: pyyaml


################################
##  AZURE KUBERNETES SERVICE  ##
################################

#TODO: AKS - attach existing or also create?
# - job: aml_aks
#   condition: and( variables['AKS_NAME'], variables['AKS_RESOURCE_GROUP'] )
#   displayName: 'Attach AKS Target to AML'
#   steps:
#   - task: AzureCLI@1
#     displayName: 'Attach AKS Target to AML'
#     inputs:
#       azureSubscription: $(SERVICECONNECTION_GROUP)
#       scriptLocation: inlineScript
#       inlineScript: |
#         workspace_params="--workspace-name $(AMLWORKSPACE_NAME) --resource-group $(RESOURCE_GROUP)"
#         # Install ML extension
#         az extension add -n azure-cli-ml
#         # Check if AKS target is already attached and attach if not
#         az ml computetarget show --name $(AML_AKS_NAME) $workspace_params
#         if [ $? -eq 1 ]; then
#           # Get AKS resource id
#           aks_id=$(az resource list -n $(AKS_NAME) -g $(AKS_RESOURCE_GROUP) --query "[0].id" -o tsv)
#           # Attach AKS
#           az ml computetarget attach aks --name $(AML_AKS_NAME) --compute-resource-id $aks_id $workspace_params
#         fi
